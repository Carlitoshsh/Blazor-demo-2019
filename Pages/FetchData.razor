@page "/fetchdata"

@using BlazorTest.Data
@inject WeatherForecastService ForecastService
@inject B_Category CategoryService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<label for="category">ID for Category</label>
<input type="text" name="category" @bind-value='@idCategory'>

<label for="namecategory">Name for Category</label>
<input type="text" name="namecategory" @bind-value='@categoryName'>

<button @onclick="CreateCategory">Add Category</button>
<button @onclick="UpdateCategory">Update Category</button>
<p>@afectedRows</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th class="theading">Date</th>
                <th class="theading">Temp. (C)</th>
                <th class="theading">Temp. (F)</th>
                <th class="theading">Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td class="tcontent" data-heading="Date">@forecast.Date.ToShortDateString()</td>
                    <td class="tcontent" data-heading="Temp. (C)">@forecast.TemperatureC</td>
                    <td class="tcontent" data-heading="Temp. (F)">@forecast.TemperatureF</td>
                    <td class="tcontent" data-heading="Summary">@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private string afectedRows;
    private string idCategory;
    private string categoryName;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    public async Task CreateCategory()
    {
        int afectedRowsProcess = await CategoryService.CreateCategory(
            new Entities.Category
            {
                Id = idCategory,
                Name = categoryName
            }
            );
        afectedRows = $"Affected Rows: {afectedRowsProcess}";
    }

    public async Task UpdateCategory()
    {
         await CategoryService.UpdateCategory(
            new Entities.Category
            {
                Id = idCategory,
                Name = categoryName
            }
            );
    }
}
