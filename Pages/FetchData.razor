@page "/fetchdata"

@using BlazorTest.Data
@inject WeatherForecastService ForecastService
@inject B_Category CategoryService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>
<button @onclick="CreateStorage">Add Storage</button>
<button @onclick="UpdateCategory">Update</button>


<input type="text" name="text" @bind-value='@idCategory'>

<input type="text" name="text" @bind-value='@categoryName'>

<p>@afectedRows</p>
@if (storages == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var storage in storages)
    {
        <p>@storage.LastUpdate</p>
        <p>@storage.PartialQuantity</p>
    }
}

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private List<BlazorTest.Entities.Storage> storages;
    private string afectedRows;
    private string idCategory;
    private string categoryName;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        storages = await ForecastService.TestConnection();
    }

    public async Task CreateStorage()
    {
        int afectedRowsProcess = await CategoryService.CreateCategory(
            new Entities.Category
            {
                Id = idCategory,
                Name = categoryName
            }
            );
        afectedRows = $"Affected Rows: {afectedRowsProcess}";
    }

    public async Task UpdateCategory()
    {
         await CategoryService.UpdateCategory(
            new Entities.Category
            {
                Id = idCategory,
                Name = categoryName
            }
            );
    }
}
