@using Entities
@inject B_Product ProductService
@inject B_Category CategoryService


<select name="" id="" @onchange="CategoryChanged">
    <option disabled>Seleccione una opcion</option>
    @foreach (var category in categories)
    {
        <option value="@category.Id">@category.Name</option>
    }
</select>

<table class="table">
    <thead>
        <tr>
            <th class="theading">Id</th>
            <th class="theading">Name. (C)</th>
            <th class="theading">Category (F)</th>
            <th class="theading"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in tempProducts)
        {
            <tr class="trow">
                <td class="tcontent" data-heading="Id">@product.Id</td>
                <td class="tcontent" data-heading="Name">@product.Name</td>
                <td class="tcontent" data-heading="Category">@product.CategoryId</td>
                <td class="tcontent" data-heading="">
                    <a href="update/@product.Id">
                        <i class="fas fa-pencil-alt fa-lg"></i>
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>


@code {
    List<Product> products = new List<Product>();
    List<Product> tempProducts = new List<Product>();
    List<Category> categories = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.ProductList();
        tempProducts = products;
        categories = await CategoryService.CategoryList();
    }

    private void CategoryChanged(ChangeEventArgs e)
    {
        tempProducts = products.Where(c => c.CategoryId == e.Value.ToString()).ToList();
    }

}
